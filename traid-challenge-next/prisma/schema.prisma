// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int     @id @default(autoincrement())
  name          String?
  email         String         @unique
  nhsNumber     String         @unique
  role          Role           @relation(fields: [roleId], references: [id])
  roleId        Int
  userDetails   UserDetails[]
  gpId          Int?
  gp            GP?           @relation(fields: [gpId], references: [id])
  familyMembers FamilyMember[]
  appointments  Appointment[]
  referrals     Referral[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model GP {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  freeSlots     FreeSlot[]
  users         User[]
  familyMembers FamilyMember[]
  appointments  Appointment[]
  referrals     Referral[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model FamilyMember {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpId          Int
  gp            GP        @relation(fields: [gpId], references: [id], onDelete: Cascade)
  name          String
  relation      String    // e.g., spouse, child, parent
  isApproved    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FreeSlot {
  id            Int           @id @default(autoincrement())
  gpId          Int
  gp            GP            @relation(fields: [gpId], references: [id], onDelete: Cascade)
  startTime     DateTime
  endTime       DateTime
  isBooked      Boolean       @default(false)
  appointment   Appointment?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Appointment {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpId          Int
  gp            GP            @relation(fields: [gpId], references: [id], onDelete: Cascade)
  freeSlot      FreeSlot      @relation(fields: [freeSlotId], references: [id])
  freeSlotId    Int           @unique
  status        AppointmentStatus @default(SCHEDULED) // SCHEDULED, CANCELLED, RESCHEDULED
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Specialist {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  type          SpecialistType // DOCTOR or MENTAL_HEALTH
  referrals     Referral[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Referral {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpId          Int
  gp            GP            @relation(fields: [gpId], references: [id], onDelete: Cascade)
  specialistId  Int
  specialist    Specialist    @relation(fields: [specialistId], references: [id], onDelete: Cascade)
  status        ReferralStatus @default(PENDING) // PENDING, APPROVED, REJECTED
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Enums
enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  RESCHEDULED
}

enum SpecialistType {
  DOCTOR
  MENTAL_HEALTH
}

enum ReferralStatus {
  PENDING
  APPROVED
  REJECTED
}

model UserDetails {
  id            Int   @id @default(autoincrement())
  userId        Int   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth   DateTime
  address       String
  phoneNumber   String
  familyMembers String[] // Store as a JSON array or use another table for more structure
}


model Role {
  id    Int  @id @default(autoincrement())
  name  String  @unique
  users User[]
}

model Account {
  id                 Int  @id @default(autoincrement())
  userId             Int
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         Int   @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
}